int m,n;
int map[10][10],*p_map = &map[0][0];
int listMap[100][5];
int in[100]={0};
int herfNum;

void inList();
int inAll(int,int,int);
int theNum(int);

int main()
{
    int i,j;
    int sum=0;

    scanf("%d %d",&m,&n);
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&map[i][j]);
            sum += map[i][j];
        }
    }

    if(sum%2 != 0){
        printf("0");
        return 0;
    }

    herfNum = sum/2;
    inList();
    for(i=1;i<m*n;i++){
        if( inAll(1,i,0) ){
            printf("%d",i);
            return 0;
        }
    }



    printf("0");

    return 0;
}

void inList(){//输出listMap[第几个数][相邻]其中[n][0]代表相邻个数
    int i,j;
    int num1=1,num2;

    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            num2=1;
            if(i-1 >= 0){
                listMap[num1][num2]=j+m*(i-1)+1;
                num2++;
            }
            if(j-1 >= 0){
                listMap[num1][num2]=(j-1)+m*i+1;
                num2++;
            }
            if(i+1 < n){
                listMap[num1][num2]=j+m*(i+1)+1;
                num2++;
            }
            if(j+1 < m){
                listMap[num1][num2]=(j+1)+m*i+1;
                num2++;
            }
            listMap[num1][0]=num2-1;
            num1++;
        }
    }
}

int inAll(int it,int num,int sum)
{
    int i,k=0;
    int item[4];//存放这个格子可达到的相邻格子
    sum += theNum(it);
    if(num == 1){
        if(sum == herfNum){
            return 1;
        }else{
            return 0;
        }
    }

    in[it]=1;

    if(listMap[it][0] != 0){
        for(i=0;i<listMap[it][0];i++){
            if( in[listMap[it][i+1]] == 1){
                continue;
            }else{
                item[k]=listMap[it][i+1];
                k++;
            }
        }
    }
    //判断几个分支
    if(k == 0){
        in[it]=0;
        return 0;
    }else {
        for(i=0;i<k;i++){
            if( inAll(item[i],num-1,sum) ){
                break;
            }
        }
    }

    in[it]=0;

    if(i == k){
        return 0;
    }

    return 1;
}

int theNum(int num){
    num--;
    return *(p_map + num%m + ((num-num%m)/m)*10);
}
