int map[2000][2];
int listMap[1001][2002];
int n,m;// n 站点 、 m 通道

void inList();
int inMap(int,int,int*);

int main()
{
    int i;
    int ined[1001]={0};
    int it,to;
    int num1=0;
    int num;

    /**********输入***********/

    scanf("%d %d",&n,&m);
    for(i=0;i<m;i++){
        scanf("%d %d",&map[i][0],&map[i][1]);
    }
    scanf("%d %d",&it,&to);

    /********判断输出*********/

    inList();
    num = inMap(it,to,ined);

    printf("成功次数为%d\n",num);

    if(num == 0){
        printf("-1");
    }else{
        for(i=0;i<n;i++){
            printf("分支%d共有%d次成功\n",i+1,listMap[i+1][2001]);
            if(i+1 == it){
                continue;
            }else if(listMap[i+1][2001]==num){
                num1++;
            }
        }
        printf("\n|--%d--|",num1);
    }



    return 0;
}

void inList(){//*将通道转换成散列表数据  listMap[第几个站点][所有与他链接的站点]！[][0]为链接该站点的站点数量 [][2001]为该点成功的访问次数~
    int i,j,num;
    for(i=0;i<n;i++){
        num=1;
        for(j=0;j<m;j++){
            listMap[j+1][2001]=0;
            if(map[j][0]==i+1){
                listMap[i+1][num]=map[j][1];
                num++;
            }else if(map[j][1]==i+1){
                listMap[i+1][num]=map[j][0];
                num++;
            }
        }
        listMap[i+1][0]=num-1;
    }
}

int inMap(int it,int to,int *in){
    int i;
    int num=0;
    printf("#进入%d分支#\n",it);

    for(i=0;i<listMap[it][0];i++){
        if(in[listMap[it][i+1]]==1){//判断曾经到达的分支
            printf("%d为曾经到达的分支\n",listMap[it][i+1]);
            continue;
        }
        if(listMap[it][i+1]==to){//判断终点
            printf("%d前方有终点！\n",it);
            num++;
        }else{
            in[it]=1;
            num+=inMap(listMap[it][i+1],to,in);//增加分支
            printf("结束%d分支反回%d分支，增加其num为%d",listMap[it][i+1],it,num);
            in[it]=0;
        }
    }
    listMap[it][2001]+=num;
    if(num>0){
            printf("返回num为%d\n",num);
        return num;
    }
    printf("该分支%d啥也没有",it);
    return 0;
}
